[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead']
lua_source = '''
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,  -- syntax highlightを有効にする
    disable = {     -- 一部の言語では無効にする
      'toml',
    }
  },
  indent = {
    enable = false
  },
  ensure_installed = 'all', -- :TSInstall allと同じ
}
'''

[[plugins]] # colorscheme
repo = 'RRethy/nvim-base16'
on_event = ['BufWinEnter']
hook_source = '''
" colorscheme base16-ayu-dark
" hi Visual term=reverse ctermbg=237 guibg=#323232
" hi CursorLine guibg=#1E1E1E
" hi CursorColumn guibg=#1E1E1E
" colorscheme base16-tender
" colorscheme base16-woodland
" colorscheme base16-still-alive
colorscheme base16-decaf
'''

[[plugins]] # git
repo = 'tpope/vim-fugitive'
on_event = ['BufRead']

[[plugins]] # VSCodeのGitLens的なやつ
repo = 'APZelos/blamer.nvim'
on_cmd = ['BlamerHide', 'BlamerShow', 'BlamerToggle']
hook_add = '''
let g:blamer_date_format = '%Y/%m/%d %H:%M'
let g:blamer_show_in_visual_modes = 0
BlamerShow
'''

[[plugins]] # airline-themes
repo = 'vim-airline/vim-airline-themes'
on_event = ['BufWinEnter']
hook_add = '''
" let g:airline_theme = 'kalisi'
let g:airline_theme = 'deus'
" let g:airline_theme = 'sol'
'''

[[plugins]] # airline
repo = 'vim-airline/vim-airline'
on_event = ['BufWinEnter']
depends =['vim-airline-themes', 'vim-fugitive']
hook_add = '''
let g:airline_deus_bg = 'dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_extensions = ['branch', 'tabline']
let g:airline#extensions#branch#enabled = 1
'''

[[plugins]] # アイコン類
repo = 'ryanoasis/vim-devicons'
on_event = ['BufWinEnter']

[[plugins]] # editorconfig
repo = 'editorconfig/editorconfig-vim'
on_event = ['BufRead']

[[plugins]] # インデント可視化
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = ['BufRead']
lua_source = '''
vim.opt.list = true
vim.opt.listchars:append "space:⋅"
vim.opt.listchars:append "eol:↓"

require("indent_blankline").setup {
  show_end_of_line = true,
  space_char_blankline = " ",
}
'''
# -- FIXME: 空行もハイライトされてしまう
# -- FIXME: ビジュアルモードの選択範囲よりインデントハイライトが優先されてしまう(ビジュアルモードの選択範囲が見えなくなる)
# vim.opt.termguicolors = true
# -- vim.cmd [[highlight IndentBlanklineIndent1 guibg=#3E1014 gui=nocombine]]
# -- vim.cmd [[highlight IndentBlanklineIndent2 guibg=#3E3014 gui=nocombine]]
# -- vim.cmd [[highlight IndentBlanklineIndent3 guibg=#3E4214 gui=nocombine]]
# -- vim.cmd [[highlight IndentBlanklineIndent4 guibg=#0C2914 gui=nocombine]]
# -- vim.cmd [[highlight IndentBlanklineIndent5 guibg=#0C4246 gui=nocombine]]
# -- vim.cmd [[highlight IndentBlanklineIndent6 guibg=#0C1046 gui=nocombine]]
# -- vim.cmd [[highlight IndentBlanklineIndent7 guibg=#25102D gui=nocombine]]
# -- vim.opt.listchars:append "space:⋅"
# -- vim.opt.listchars:append "eol:↓"
# 
# require("indent_blankline").setup {
#   -- char = "",
#   -- char_highlight_list = {
#     -- -- "IndentBlanklineIndent1",
#     -- "IndentBlanklineIndent2",
#     -- -- "IndentBlanklineIndent3",
#     -- "IndentBlanklineIndent4",
#     -- -- "IndentBlanklineIndent5",
#     -- "IndentBlanklineIndent6",
#     -- "IndentBlanklineIndent7",
#   -- },
#   -- space_char_highlight_list = {
#     -- -- "IndentBlanklineIndent1",
#     -- "IndentBlanklineIndent2",
#     -- -- "IndentBlanklineIndent3",
#     -- "IndentBlanklineIndent4",
#     -- -- "IndentBlanklineIndent5",
#     -- "IndentBlanklineIndent6",
#     -- "IndentBlanklineIndent7",
#   -- },
#   -- show_trailing_blankline_indent = false,
#   -- show_end_of_line = true,
#   -- space_char_blankline = "",
#   -- space_char_blankline_highlight_list = {},
# }

[[plugins]] # TODO しばらく試してみていらなかったら消す
repo = 'unblevable/quick-scope'
on_event = ['BufRead']

[[plugins]] # コメントアウト
repo = 'tyru/caw.vim'
on_event = ['BufRead']
hook_add = '''
" コメントアウト(ノーマルモード)
nnoremap <C-/> <Plug>(caw:hatpos:toggle)
" コメントアウト(ビジュアルモード)
vnoremap <C-/> <Plug>(caw:hatpos:toggle)
'''

# NOTE: caw.vimではerubyのコメントアウトが効かなかったので、erubyのみcommentaryで対応
# gccで一行コメントアウト、gcでビジュアルモード選択範囲をコメントアウト
[[plugins]]
repo = 'tpope/vim-commentary'
on_if = 'expand("%") =~ "\.erb"'
# on_ft = 'eruby'

[[plugins]] # 括弧、クォーテーション、タグを自動で閉じてくれるプラグイン(自作)
repo = 'ukiuki-engineer/vim-autoclose'
on_event = ['BufRead']

[[plugins]] # blade
repo = 'jwalton512/vim-blade'
on_if = 'expand("%") =~ "blade\.php"'
on_ft = ['blade']

[[plugins]] # カラーコード可視化
repo = 'norcalli/nvim-colorizer.lua'
on_ft = ['css', 'html', 'less', 'sass', 'scss', 'stylus', 'vim', 'blade', 'vue', 'eruby', 'toml']
lua_post_source = '''
require 'colorizer'.setup()
'''
hook_source = '''
augroup Colorizer
  autocmd!
  autocmd FileType css,html,less,sass,scss,stylus,vim,blade,vue,eruby,toml ColorizerAttachToBuffer
  autocmd BufEnter *.css,*.html,*.sass,*.scss,*.vim,*.blade.php,*.vue,*.erb,*.toml ColorizerAttachToBuffer
augroup END
'''

[[plugins]] # ヘルプファイル自動生成
repo = 'LeafCage/vimhelpgenerator'
on_cmd = ['VimHelpGenerator', 'VimHelpGeneratorVirtual']
hook_add = '''
let g:vimhelpgenerator_defaultlanguage = 'ja'
let g:vimhelpgenerator_version = ''
let g:vimhelpgenerator_author = 'Author  : ukiuki-engineer'
let g:vimhelpgenerator_contents = {
  \ 'contents': 1, 'introduction': 1, 'usage': 1, 'interface': 1,
  \ 'variables': 1, 'commands': 1, 'key-mappings': 1, 'functions': 1,
  \ 'setting': 0, 'todo': 1, 'changelog': 0
  \}
'''

[[plugins]] # markdownでtable作成
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]] # ファイラー
repo = 'scrooloose/nerdtree'
on_cmd = [
  'NERDTree',
  'NERDTree',
  'NERDTreeCWD',
  'NERDTreeClose',
  'NERDTreeFind',
  'NERDTreeFocus',
  'NERDTreeFromBookmark',
  'NERDTreeMirror',
  'NERDTreeRefreshRoot',
  'NERDTreeSetting',
  'NERDTreeShowHidden',
  'NERDTreeToggle',
  'NERDTreeToggleVCS',
  'NERDTreeVCS'
]
hook_add = '''
let g:NERDTreeShowHidden = 1 " 隠しファイルを表示
"1 : ファイル、ディレクトリ両方共ダブルクリックで開く。
"2 : ディレクトリのみシングルクリックで開く。
"3 : ファイル、ディレクトリ両方共シングルクリックで開く。
let g:NERDTreeMouseMode=3
" NERDTree表示/非表示切り替え
nnoremap <C-n> :NERDTreeToggle<CR>
" FIXME 無名バッファの時(bufname() == "")は下のmapをしないようにする
" NERDTreeを開き、現在開いているファイルの場所にジャンプ
nnoremap <C-w>t :NERDTreeFind<CR>
'''

[[plugins]] # ファジーファインダー
repo = 'junegunn/fzf'
on_event = ['BufRead']
build = './install'

[[plugins]] # ファジーファインダー
repo = 'junegunn/fzf.vim'
# NOTE: こっちでもいい→on_source = ['fzf']
on_cmd = [
  'Files',
  'GFiles',
  'GFiles?',
  'Buffers',
  'Colors',
  'Ag',
  'Rg',
  'Lines',
  'BLines',
  'Tags',
  'BTags',
  'Marks',
  'Windows',
  'Locate PATTERN',
  'History',
  'History:',
  'History/',
  'Snippets',
  'Commits',
  'BCommits',
  'Commands',
  'Maps',
  'Helptags',
  'Filetypes'
]
depends = 'junegunn/fzf'
hook_add = '''
nnoremap <C-p> :Files<CR>
nnoremap gb :Buffers<CR>
nnoremap gl :Lines<CR>
" Rgはそのまま:Rgで
" NOTE: batをインストーするとプレビューウィンドウがハイライトされる
'''

[[plugins]] # vimの起動速度を測定
repo = 'dstein64/vim-startuptime'
on_cmd = ['StartupTime']

# NOTE: coc-snippetsで呼ぶ出す用
# 個々のcocプラグイン側の補完候補とぶつかって面倒な場合はどちらかをオフにする
[[plugins]] # スニペットのソース
repo = 'honza/vim-snippets'
on_event = ['BufRead']

# NOTE: coc-bladeは、"b:xxx"と打つと補完候補が出る
[[plugins]] # coc.nvim
repo = 'neoclide/coc.nvim'
on_event = ['BufRead']
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
  \ 'coc-word',
  \ 'coc-sql',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-vetur',
  \ 'coc-vimlsp',
  \ 'coc-docker',
  \ 'coc-markdownlint',
  \ 'coc-json',
  \ 'coc-yaml',
  \ 'coc-xml',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-snippets',
  \ '@yaegassy/coc-intelephense',
  \ 'coc-blade',
  \ 'coc-solargraph',
  \ 'coc-spell-checker',
  \ 'coc-sh'
\ ]
" 補完の選択をEnterで決定
inoremap <expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" 定義ジャンプ
nnoremap <space>d <Plug>(coc-definition)
" 関数とかの情報を表示する
nnoremap <space>h :<C-u>call CocAction('doHover')<CR>
command! -nargs=0 Format :call CocAction('format')
'''
