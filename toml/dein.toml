[[plugins]] # 日本語ドキュメント
repo = 'vim-jp/vimdoc-ja'

# luaのドキュメント
# :h nvim-lua-guide.txt
[[plugins]]
repo = 'MDeiml/tree-sitter-markdown'

# [[plugins]] # カラーテーマ-tender-
# repo = 'jacoborus/tender.vim'
# hook_add = '''
# if isdirectory($HOME . "/.cache/dein/repos/github.com/jacoborus/tender.vim")
#   if (has("termguicolors"))
#     set termguicolors
#   endif
#   " let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#   syntax enable
#   let g:lightline = { 'colorscheme': 'tender' }
#   let g:airline_theme = 'tender'
#   " let macvim_skip_colorscheme=1
# endif
# '''

# [[plugins]] # lightline
# repo = 'itchyny/lightline.vim'

[[plugins]] # airline
repo = 'vim-airline/vim-airline'
hook_add = '''
" let g:airline_powerline_fonts = 1
'''

[[plugins]] # ファイラー
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowHidden = 1 " 隠しファイルを表示
nnoremap <C-n> :NERDTreeToggle<CR>
" FIXME 無名バッファの時(bufname() == "")は下のmapをしないようにする
nnoremap <C-w>t :NERDTreeFind<CR>
if getcwd() != $HOME
  augroup NERDTreeSetting
    autocmd!
    autocmd StdinReadPre * let s:std_in = 1
    if (argc() == 0 || argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in"))
      autocmd VimEnter,SessionLoadPost * NERDTreeToggle | wincmd p
    else
      autocmd VimEnter * NERDTreeToggle | wincmd p
    endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  augroup END
endif
'''

[[plugins]] # ファジーファインダー
repo = 'junegunn/fzf'
build = './install'

[[plugins]] # ファジーファインダー
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
hook_add = '''
" パス指定したい場合はパスを指定してEnter
" そのまま検索したい場合はそのままEnter
nnoremap <C-p> :Files<space>
nnoremap gb :Buffers<CR>
" nnoremap gl :Lines<CR>
'''

# FIXME fzfのRgの設定を整えるまではとりあえずGrepperで
[[plugins]] # Grepper
repo = 'mhinz/vim-grepper'

[[plugins]] # 括弧、クォーテーション、タグを自動で閉じてくれるプラグイン(自作)
repo = 'ukiuki-engineer/vim-autoclose'

[[plugins]] # コメントアウト
repo = 'tyru/caw.vim.git'
hook_add = '''
nnoremap <C-/> <Plug>(caw:i:toggle)
vnoremap <C-/> <Plug>(caw:i:toggle)
'''

[[plugins]] # インデント可視化
repo = 'lukas-reineke/indent-blankline.nvim'
lua_source = '''
-- vim.opt.termguicolors = true
-- vim.cmd [[highlight IndentBlanklineIndent1 guifg=#E06C75 gui=nocombine]]
-- vim.cmd [[highlight IndentBlanklineIndent2 guifg=#E5C07B gui=nocombine]]
-- vim.cmd [[highlight IndentBlanklineIndent3 guifg=#98C379 gui=nocombine]]
-- vim.cmd [[highlight IndentBlanklineIndent4 guifg=#56B6C2 gui=nocombine]]
-- vim.cmd [[highlight IndentBlanklineIndent5 guifg=#61AFEF gui=nocombine]]
-- vim.cmd [[highlight IndentBlanklineIndent6 guifg=#C678DD gui=nocombine]]
-- 
-- vim.opt.list = true
-- -- vim.opt.listchars:append "space:⋅"
-- vim.opt.listchars:append "eol:↴"
-- 
-- require("indent_blankline").setup {
  -- space_char_blankline = " ",
  -- char_highlight_list = {
    -- "IndentBlanklineIndent1",
    -- "IndentBlanklineIndent2",
    -- "IndentBlanklineIndent3",
    -- "IndentBlanklineIndent4",
    -- "IndentBlanklineIndent5",
    -- "IndentBlanklineIndent6",
  -- },
-- }
'''

[[plugins]] # editorconfig
repo = 'editorconfig/editorconfig-vim'

[[plugins]] # アイコン類
repo = 'ryanoasis/vim-devicons'

[[plugins]] # lsp
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
  \ 'coc-sql',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-vetur',
  \ 'coc-vimlsp',
  \ 'coc-docker',
  \ 'coc-markdownlint',
  \ 'coc-json',
  \ 'coc-yaml',
  \ 'coc-xml',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-snippets',
  \ 'coc-phpls',
  \ 'coc-blade',
  \ 'coc-spell-checker',
\ ]
inoremap <expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
nnoremap <space>d <Plug>(coc-definition)
nnoremap <space>ds :sp<CR><Plug>(coc-definition)
nnoremap <space>dv :vs<CR><Plug>(coc-definition)
nnoremap <space>h :<C-u>call CocAction('doHover')<CR>
command! -nargs=0 Format :call CocAction('format')
'''
