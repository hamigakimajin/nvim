[[plugins]] # 日本語ドキュメント
repo = 'vim-jp/vimdoc-ja'

[[plugins]] # カラーテーマ
repo = 'jacoborus/tender.vim'

[[plugins]] # lightline
repo = 'itchyny/lightline.vim'

[[plugins]] # airline
repo = 'vim-airline/vim-airline'

[[plugins]] # ファイラー
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <C-n> :NERDTreeToggle<CR>
if getcwd() != $HOME
  augroup NERDTreeSetting
    autocmd!
    autocmd StdinReadPre * let s:std_in = 1
    if (argc() == 0 || argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in"))
      autocmd VimEnter,SessionLoadPost * NERDTreeToggle | wincmd p
    else
      autocmd VimEnter * NERDTreeToggle | wincmd p
    endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  augroup END
endif
'''

[[plugins]] # ファジーファインダー
repo = 'junegunn/fzf'
build = './install'

[[plugins]] # ファジーファインダー
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
hook_add = '''
" パス指定したい場合はパスを指定してEnter
" そのまま検索したい場合はそのままEnter
nnoremap <C-p> :Files<space>
nnoremap gb :Buffers<CR>
" nnoremap gl :Lines<CR>
'''

# FIXME fzfのRgの設定を整えるまではとりあえずGrepperで
[[plugins]] # Grepper
repo = 'mhinz/vim-grepper'

[[plugins]] # 括弧、クォーテーション、タグを自動で閉じてくれるプラグイン(自作)
repo = 'ukiuki-engineer/vim-autoclose'

[[plugins]] # コメントアウト
repo = 'tyru/caw.vim.git'
hook_add = '''
nnoremap <C-/> <Plug>(caw:i:toggle)
vnoremap <C-/> <Plug>(caw:i:toggle)
'''

[[plugins]] # インデント可視化
repo = 'Yggdroot/indentLine'
if = 'has("conceal")'
hook_add = '''
augroup indentLine
  autocmd!
  autocmd VimEnter,BufRead,BufWinEnter,BufEnter * IndentLinesEnable
augroup END
" set list lcs=tab:\|\
'''

[[plugins]] # editorconfig
repo = 'editorconfig/editorconfig-vim'

[[plugins]] # アイコン類
repo = 'ryanoasis/vim-devicons'

[[plugins]] # lsp
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
  \ 'coc-sql',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-vetur',
  \ 'coc-vimlsp',
  \ 'coc-docker',
  \ 'coc-markdownlint',
  \ 'coc-json',
  \ 'coc-yaml',
  \ 'coc-xml',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-snippets',
  \ 'coc-phpls',
  \ 'coc-blade',
  \ 'coc-spell-checker',
\ ]
inoremap <expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
nnoremap <space>d <Plug>(coc-definition)
nnoremap <space>ds :sp<CR><Plug>(coc-definition)
nnoremap <space>dv :vs<CR><Plug>(coc-definition)
nnoremap <space>h :<C-u>call CocAction('doHover')<cr>
command! -nargs=0 Format :call CocAction('format')
'''
